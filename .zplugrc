# Zplug config

source ~/.zplug/init.zsh


zplug "tymm/zsh-directory-history"
zplug "lukechilds/zsh-nvm"

zplug "hlissner/zsh-autopair", defer:2

# zplug "mafredri/zsh-async", from:"github", use:"async.zsh"

# AUTO_LS_COMMANDS=(custom-ls custom-git)
# AUTO_LS_NEWLINE=false
# zplug "desyncr/auto-ls", from:"github", use:"auto-ls.plugin.zsh"

#zplug "nocttuam/autodotenv", from:"github"

zplug "djui/alias-tips", from:github

zplug "MichaelAquilina/zsh-auto-notify"

zplug "arzzen/calc.plugin.zsh"

zplug "zpm-zsh/colorize"

#zplug "psprint/zsh-cmd-architect"

# zplug "mollifier/anyframe"

# zplug "vifon/deer", use:deer
# zle -N deer
# bindkey '\ek' deer


# zplug "vladmyr/dotfiles-plugin"

zplug "DarrinTisdale/zsh-aliases-exa"

# zplug "fabiokiatkowski/exercism.plugin.zsh"

# zplug "mdumitru/fancy-ctrl-z"

zplug "zdharma/fast-syntax-highlighting"

zplug 'wfxr/forgit'

zplug "Tarrasch/zsh-functional"

zplug "seletskiy/zsh-fuzzy-search-and-edit"

zplug 'ytet5uy4/fzf-widgets'

# zplug 'wyntau/fzf-zsh'

# zplug 'oldratlee/hacker-quotes'

zplug 'micrenda/zsh-nohup', defer:2

zplug 'chipsenkbeil/zsh-notes', from:github, as:plugin

# zplug 'caarlos0-graveyard/zsh-pg'

# zplug "damofthemoon/zsh-quotify"

zplug "RobSis/zsh-reentry-hook" #// BROKEN, HANG THE SHELL

zplug "gko/ssh-connect", use:"ssh-connect.sh"

zplug "hcgraf/zsh-sudo"

zplug "le0me55i/zsh-systemd"

# zplug "sobolevn/wakatime-zsh-plugin"

# zplug "sinetoami/web-search"

zplug "bryanculver/opus.plugin.zsh"

zplug "zsh-users/zsh-autosuggestions"
zplug "ericbn/zsh-history-substring-search"
# bindkey -v
# zplug "softmoth/zsh-vim-mode"

zplug "olets/zsh-abbr"


# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load 

# CONFIG
bindkey '\eOA' history-substring-search-up
bindkey '\eOB' history-substring-search-down

# # Anyframe
# autoload -Uz anyframe-init
# anyframe-init

# zstyle ":anyframe:selector:" use fzf
# zstyle ":anyframe:selector:fzf:" command 'fzf --extended'

# autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
# add-zsh-hook chpwd chpwd_recent_dirs

# bindkey '^xb' anyframe-widget-cdr
# bindkey '^x^b' anyframe-widget-checkout-git-branch

# bindkey '^xr' anyframe-widget-execute-history
# bindkey '^x^r' anyframe-widget-execute-history

# bindkey '^xi' anyframe-widget-put-history
# bindkey '^x^i' anyframe-widget-put-history

# bindkey '^xg' anyframe-widget-cd-ghq-repository
# bindkey '^x^g' anyframe-widget-cd-ghq-repository

# bindkey '^xk' anyframe-widget-kill
# bindkey '^x^k' anyframe-widget-kill

# bindkey '^xe' anyframe-widget-insert-git-branch
# bindkey '^x^e' anyframe-widget-insert-git-branch

# /Anyframe

[[ -s /etc/profile.d/autojump.sh ]] && source /etc/profile.d/autojump.sh

auto-ls-custom-ls () {
    ls -l
}

auto-ls-custom-git () {
    CHANGED=$(git diff-index --name-only HEAD --)
    if [ -n "$CHANGED" ]; then
	auto-ls-git-status
    fi
}

# fast-theme q-jmnemonic

## Emacs VTerm

vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi

}
vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
}

setopt PROMPT_SUBST
PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'

vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}

find_file() {
    vterm_cmd find-file "$(realpath "$@")"
}

say() {
    vterm_cmd message "%s" "$*"
}
open_file_below() {
    vterm_cmd find-file-below "$(realpath "$@")"
}
